async function callOpenAI(e,n,o){const t=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",credentials:"omit",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({model:"gpt-4o",messages:[{role:"system",content:n},{role:"user",content:o}],max_tokens:400})});console.log("API Response: ",t);const s=await t.json();return console.log("ðŸ—‚ full OpenAI JSON",s),s.choices[0]?.message?.content||"No response"}chrome.runtime.onMessage.addListener((function(e,n,o){const t=e.highlightedText,s=/[^\w\s]/g,r=/[a-zA-z]{2,4}([-\s]|(&nbsp;))[0-9]{3,4}/.exec(t);if(r)try{const e=r[0].replace(s," ").trim().toLocaleUpperCase().split(/\s|&nbsp;/);3===e[1].length&&(e[1]+="0");const n={inputcourse:e[0]+"-"+e[1]};chrome.storage.local.set(n,(()=>{console.log("Input course saved")}))}catch(e){console.log(e)}})),chrome.runtime.onMessage.addListener(((e,n,o)=>(console.log("ðŸ”” background.onMessage got:",e),"getAiSelection"===e.action?(chrome.storage.local.get(["openaiKey"],(async({openaiKey:n})=>{if(!n)return void o({error:"No OpenAI key saved"});const t={role:"user",content:`Here are the courses I'm interested in: ${e.courses.map((e=>{const n=e.courseData;return[`â€¢ ${e.id}: ${e.title}`,`    Course Quality: ${n.course_quality}`,`    Instructor Quality: ${n.instructor_quality}`,`    Difficulty: ${n.difficulty}`,`    Work Required: ${n.work_required}`].join("\n")})).join("\n\n")} \n        Based on their stats like workload, difficulty, and quality averages, which one would you recommend I take this coming semester? \n        You have to pick one course and one course only. Assume I am equally interested in all of them. I need to know which is best.\n        Explain briefly but limit your answer to 2-3 sentences and be consice and quantitative.`};try{const e=await callOpenAI(n,"You are a helpful academic advisor for Penn undergrads.",t.content);o({answer:e})}catch(e){console.error(e),o({answer:"Error calling OpenAI."})}})),!0):"getCourseSummary"===e.action?(chrome.storage.local.get(["openaiKey"],(async({openaiKey:n})=>{if(n)try{const t=e.course,s=t.courseData,r=[`${t.id}: ${t.title}`,`Course Quality: ${s.course_quality}`,`Instructor Quality: ${s.instructor_quality}`,`Difficulty: ${s.difficulty}`,`Work Required: ${s.work_required}`,`Description: ${s.description||"No description available"}`].join("\n"),a={role:"system",content:"You are a helpful academic advisor for Penn undergrads, known for giving concise but insightful course summaries."},i={role:"user",content:`I'm considering taking this course:\n${r}\n\nPlease provide a short summary with these points:\n\n- **Course Content**: What I'll learn in 1-2 sentences\n- **Teaching Style**: What teaching approach is used based on ratings\n- **Ideal For**: What type of student would benefit most\n- **Challenge Level**: Assessment of difficulty vs workload balance\n\nKeep your full response under 6 sentences total and use the bullet format with bold headers exactly as shown.`},c=await callOpenAI(n,a.content,i.content);o({answer:c})}catch(e){console.error(e),o({answer:"Error calling OpenAI."})}else o({error:"No OpenAI key saved"})})),!0):"getCourseRecommendation"===e.action?(chrome.storage.local.get(["openaiKey"],(async({openaiKey:n})=>{if(n)try{const t=e.courses.map((e=>{const n=e.courseData;return[`â€¢ ${e.id}: ${e.title}`,`    Course Quality: ${n.course_quality}`,`    Instructor Quality: ${n.instructor_quality}`,`    Difficulty: ${n.difficulty}`,`    Work Required: ${n.work_required}`,`    Description: ${n.description||"No description available"}`].join("\n")})).join("\n\n"),s={role:"system",content:"You are a helpful academic advisor for Penn undergrads who specializes in comparing courses and providing structured analysis."},r={role:"user",content:`I'm trying to decide between these courses:\n\n${t}\n\nPlease compare these courses and help me decide which one to take. Use this EXACT format in your response:\n\n### 1. Overall Course Quality\n- **COURSE-ID**: Analysis of quality rating...\n- **COURSE-ID**: Analysis of quality rating...\n\n### 2. Teaching Style and Instructor Quality\n- **COURSE-ID**: Analysis of instructor quality...\n- **COURSE-ID**: Analysis of instructor quality...\n\n### 3. Workload vs. Difficulty Balance\n- **COURSE-ID**: Analysis of workload/difficulty...\n- **COURSE-ID**: Analysis of workload/difficulty...\n\n### 4. Content Relevance and Value\n- **COURSE-ID**: Analysis of content...\n- **COURSE-ID**: Analysis of content...\n\n### Recommendation\nFinal recommendation with justification.\n\nReplace COURSE-ID with actual course IDs. Follow this format precisely, keeping each section brief and focused. Keep your response under 250 words.`},a=await callOpenAI(n,s.content,r.content);o({answer:a})}catch(e){console.error(e),o({answer:"Error calling OpenAI."})}else o({error:"No OpenAI key saved"})})),!0):void 0)));